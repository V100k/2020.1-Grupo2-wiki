{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Grupo 2 EQUIPE EPS Foto Nome Email GitHub Rafael Makaha rafael.makaha@gmail.com rafaelmakaha Jo\u00e3o Vitor Morandi joao.lemos4000@gmail.com joaovitorml Guilherme de Lyra joao.lemos4000@gmail.com guilhermedelyra EQUIPE MDS Foto Nome Email GitHub Arthur Manuel Flor\u00eancio Sena senaarth@gmail.com senaarth Marcos Felipe de Almeida Souza marofelipe@live.com Marofelipe Marcos Gabriel Tavares marcosgabriel.ro@hotmail.com marcosgtavares Antonio Ruan Moura Barreto ruanmoura13@outlook.com RuanMoura Victor Hugo Siqueira Costa vitao.hugo@hotmail.com V100K Victor Samuel dos Santos Lucas victor.samuelsantoss@gmail.com victordsantoss Vin\u00edcius Vieira de Souza vd.souza1999@gmail.com faco400","title":"Inicio"},{"location":"#grupo-2","text":"","title":"Grupo 2"},{"location":"#equipe-eps","text":"Foto Nome Email GitHub Rafael Makaha rafael.makaha@gmail.com rafaelmakaha Jo\u00e3o Vitor Morandi joao.lemos4000@gmail.com joaovitorml Guilherme de Lyra joao.lemos4000@gmail.com guilhermedelyra","title":"EQUIPE EPS"},{"location":"#equipe-mds","text":"Foto Nome Email GitHub Arthur Manuel Flor\u00eancio Sena senaarth@gmail.com senaarth Marcos Felipe de Almeida Souza marofelipe@live.com Marofelipe Marcos Gabriel Tavares marcosgabriel.ro@hotmail.com marcosgtavares Antonio Ruan Moura Barreto ruanmoura13@outlook.com RuanMoura Victor Hugo Siqueira Costa vitao.hugo@hotmail.com V100K Victor Samuel dos Santos Lucas victor.samuelsantoss@gmail.com victordsantoss Vin\u00edcius Vieira de Souza vd.souza1999@gmail.com faco400","title":"EQUIPE MDS"},{"location":"repository_politics/repository_politics/","text":"Pol\u00edticas de Reposit\u00f3rio de c\u00f3digo Pol\u00edtica de Commits Adota-se para este projeto padr\u00f5es para o coment\u00e1rio e execu\u00e7\u00e3o dos commits. O idioma padr\u00e3o para efetuar commits neste reposit\u00f3rio \u00e9 o ingl\u00eas. As mensagens devem ser sucintas e expressarem de forma clara e objetiva a a\u00e7\u00e3o do commit. Como exemplo, considere o trabalho da constru\u00e7\u00e3o de uma tela inicial da aplica\u00e7\u00e3o. O commit dever\u00e1 ser efetuado como segue: git commit -m \"Create new home Screen\" Atente ainda para os seguintes aspectos: * O commit deve iniciar com letras mai\u00fasculas. * O commit deve iniciar com verbo no infinitivo. Exemplos: -\"Fix login auth error\" -\"Create User model\" -\"Refactor profile View\" -\"Translate flat pages\" Pol\u00edtica de Branches O reposit\u00f3rio possui uma branch master , que possui objetivo de manter a vers\u00e3o est\u00e1vel do projeto. Possui tamb\u00e9m uma branch para desenvolvimento chamada devel , cujo objetivo \u00e9 manter-se atualizada. Desta forma nenhum commit deve ser efetuado diretamente nestas branchs. As altera\u00e7\u00f5es devem ser criadas inicialmente em branchs de funcionalidades ou de configura\u00e7\u00e3o e corre\u00e7\u00e3o, toda branch de funcionalidade deve ser criada a partir da branch devel. A imagem a seguir, ilustra como deve ser a organiza\u00e7\u00e3o das branchs e os eventos de cria\u00e7\u00e3o e merge de acordo com o Git Flow . [[https://leanpub.com/site_images/git-flow/git-workflow-release-cycle-2feature.png]] Como pode ser visto, ap\u00f3s a etapa de desenvolvimento em uma branch de funcionalidade ser conclu\u00edda, deve ser submetido um pull request em caso de alguma revis\u00e3o ou merge da mesma. O pull request deve ser conferido por um membro da equipe e se estiver em conformidade, ent\u00e3o o pull request \u00e9 aceito. Padr\u00e3o para cria\u00e7\u00e3o e uso das branches Deve-se criar novas branches para trabalho seguindo padr\u00e3o GitFlow . Estas devem ser criadas a partir da branch develop , e devem seguir a nomenclatura padr\u00e3o abaixo, redigidas no idioma ingl\u00eas. O c\u00f3digo das branchs deve estar sincronizado com alguma Issue do reposit\u00f3rio, sendo ent\u00e3o o nome padr\u00e3o para as branchs no formato: i401_validate_username i397_create_cluster_group Automatiza\u00e7\u00e3o de Fechamento de Issue Caso termine sua funcionalidade e deseje fechar a Issue automaticamente \u00e9 possivel atrav\u00e9s das palavras chaves na descri\u00e7\u00e3o do commit ou pull request: resolves: #numeroDaIssue Em caso de m\u00faltiplas issues \u00e9 necess\u00e1rio replicar o comando: resolves: #numeroDaIssue resolves: #numeroDaIssue2 resolves: #numeroDaIssue3 Pull-requests tempestivos e permanentes Nesse projeto adotamos a pol\u00edtica dos pull requests tempestivos e permanentes, ou seja, a partir do primeiro commit deve ser criado o pull request de merge da branch da issue com a develop. Esse pull request \u00e9, portanto, tempestivo - criado no primeiro commit - e permanente - permanece aberto enquanto o trabalho da issue estiver sendo executado. Al\u00e9m disso, sugere-se, para altera\u00e7\u00f5es no frontend, o envio tamb\u00e9m de prints ou gifs que ajudem a entender o trabalho realizado. O autor do pull request deve assignar o grupo de revis\u00e3o: https://github.com/orgs/ejplatform/teams/revision Conflitos nos Pull-requests A branch do PR deve estar sempre atualizado com a branch de desenvolvimento (develop) em caso de conflitos, deve-se realizar um rebase na branch com a develop Exce\u00e7\u00f5es: commits que podem ser feitos diretamente na devel Fix de conte\u00fado e css (n\u00e3o arquiteturais) Tradu\u00e7\u00e3o Cobertura de teste Atualizar assets Commits de melhoramentos/bugfix de pipeline (que precisam ser commitados na branch do pipeline) Valida\u00e7\u00f5es de produto As valida\u00e7\u00f5es de produto acontecem motivadas pelos PRs do develop para a master. Sempre que um revisor fizer o merge dos PRs vindos das branches de issue pra develop, gera um PR correspondente pra master, acionando a valida\u00e7\u00e3o de produto, focada na release.","title":"Pol\u00edtica de Reposit\u00f3rio"},{"location":"repository_politics/repository_politics/#politicas-de-repositorio-de-codigo","text":"","title":"Pol\u00edticas de Reposit\u00f3rio de c\u00f3digo"},{"location":"repository_politics/repository_politics/#politica-de-commits","text":"Adota-se para este projeto padr\u00f5es para o coment\u00e1rio e execu\u00e7\u00e3o dos commits. O idioma padr\u00e3o para efetuar commits neste reposit\u00f3rio \u00e9 o ingl\u00eas. As mensagens devem ser sucintas e expressarem de forma clara e objetiva a a\u00e7\u00e3o do commit. Como exemplo, considere o trabalho da constru\u00e7\u00e3o de uma tela inicial da aplica\u00e7\u00e3o. O commit dever\u00e1 ser efetuado como segue: git commit -m \"Create new home Screen\" Atente ainda para os seguintes aspectos: * O commit deve iniciar com letras mai\u00fasculas. * O commit deve iniciar com verbo no infinitivo. Exemplos: -\"Fix login auth error\" -\"Create User model\" -\"Refactor profile View\" -\"Translate flat pages\"","title":"Pol\u00edtica de Commits"},{"location":"repository_politics/repository_politics/#politica-de-branches","text":"O reposit\u00f3rio possui uma branch master , que possui objetivo de manter a vers\u00e3o est\u00e1vel do projeto. Possui tamb\u00e9m uma branch para desenvolvimento chamada devel , cujo objetivo \u00e9 manter-se atualizada. Desta forma nenhum commit deve ser efetuado diretamente nestas branchs. As altera\u00e7\u00f5es devem ser criadas inicialmente em branchs de funcionalidades ou de configura\u00e7\u00e3o e corre\u00e7\u00e3o, toda branch de funcionalidade deve ser criada a partir da branch devel. A imagem a seguir, ilustra como deve ser a organiza\u00e7\u00e3o das branchs e os eventos de cria\u00e7\u00e3o e merge de acordo com o Git Flow . [[https://leanpub.com/site_images/git-flow/git-workflow-release-cycle-2feature.png]] Como pode ser visto, ap\u00f3s a etapa de desenvolvimento em uma branch de funcionalidade ser conclu\u00edda, deve ser submetido um pull request em caso de alguma revis\u00e3o ou merge da mesma. O pull request deve ser conferido por um membro da equipe e se estiver em conformidade, ent\u00e3o o pull request \u00e9 aceito.","title":"Pol\u00edtica de Branches"},{"location":"repository_politics/repository_politics/#padrao-para-criacao-e-uso-das-branches","text":"Deve-se criar novas branches para trabalho seguindo padr\u00e3o GitFlow . Estas devem ser criadas a partir da branch develop , e devem seguir a nomenclatura padr\u00e3o abaixo, redigidas no idioma ingl\u00eas. O c\u00f3digo das branchs deve estar sincronizado com alguma Issue do reposit\u00f3rio, sendo ent\u00e3o o nome padr\u00e3o para as branchs no formato: i401_validate_username i397_create_cluster_group","title":"Padr\u00e3o para cria\u00e7\u00e3o e uso das branches"},{"location":"repository_politics/repository_politics/#automatizacao-de-fechamento-de-issue","text":"Caso termine sua funcionalidade e deseje fechar a Issue automaticamente \u00e9 possivel atrav\u00e9s das palavras chaves na descri\u00e7\u00e3o do commit ou pull request: resolves: #numeroDaIssue Em caso de m\u00faltiplas issues \u00e9 necess\u00e1rio replicar o comando: resolves: #numeroDaIssue resolves: #numeroDaIssue2 resolves: #numeroDaIssue3","title":"Automatiza\u00e7\u00e3o de Fechamento de Issue"},{"location":"repository_politics/repository_politics/#pull-requests-tempestivos-e-permanentes","text":"Nesse projeto adotamos a pol\u00edtica dos pull requests tempestivos e permanentes, ou seja, a partir do primeiro commit deve ser criado o pull request de merge da branch da issue com a develop. Esse pull request \u00e9, portanto, tempestivo - criado no primeiro commit - e permanente - permanece aberto enquanto o trabalho da issue estiver sendo executado. Al\u00e9m disso, sugere-se, para altera\u00e7\u00f5es no frontend, o envio tamb\u00e9m de prints ou gifs que ajudem a entender o trabalho realizado. O autor do pull request deve assignar o grupo de revis\u00e3o: https://github.com/orgs/ejplatform/teams/revision","title":"Pull-requests tempestivos e permanentes"},{"location":"repository_politics/repository_politics/#conflitos-nos-pull-requests","text":"A branch do PR deve estar sempre atualizado com a branch de desenvolvimento (develop) em caso de conflitos, deve-se realizar um rebase na branch com a develop","title":"Conflitos nos Pull-requests"},{"location":"repository_politics/repository_politics/#excecoes-commits-que-podem-ser-feitos-diretamente-na-devel","text":"Fix de conte\u00fado e css (n\u00e3o arquiteturais) Tradu\u00e7\u00e3o Cobertura de teste Atualizar assets Commits de melhoramentos/bugfix de pipeline (que precisam ser commitados na branch do pipeline)","title":"Exce\u00e7\u00f5es: commits que podem ser feitos diretamente na devel"},{"location":"repository_politics/repository_politics/#validacoes-de-produto","text":"As valida\u00e7\u00f5es de produto acontecem motivadas pelos PRs do develop para a master. Sempre que um revisor fizer o merge dos PRs vindos das branches de issue pra develop, gera um PR correspondente pra master, acionando a valida\u00e7\u00e3o de produto, focada na release.","title":"Valida\u00e7\u00f5es de produto"},{"location":"roadmap/roadmap/","text":"RoadMap Este documento tem por finalidade armazenar o planejamento do RoadMap seguido no desenvolvimento do projeto. RoadMap do Produto RoadMap de pap\u00e9is Esta sec\u00e7\u00e3o apresentar\u00e1 as responsabilidades de cada papel do scrum neste projeto. Scrum Master O(A) Scrum Master ser\u00e1 respons\u00e1vel por: Documentar o Product Backlog ; Priorizar o Product Backlog ; Gerar e atualizar a Tabela de Conhecimentos ; Realizar treinamento sobre metodologia \u00e1gil com a equipe; Gerar documenta\u00e7\u00e3o de Velocity ; Registrar dailies ; Gerar e atualizar o Burndown de Risco ; Realizar o planejamento das sprints seguintes. Arquiteto(a) O(A) arquiteto(a) ser\u00e1 respons\u00e1vel por: Gerar Documento de Arquitetura ; Gerar Diagrama de Pacotes ; Gerar Diagrama de Classes ; Configurar o Banco de Dados. DevOps O(A) DevOps ser\u00e1 respon\u015bavel por: Gerar documento de Pol\u00edtica de Branches ; Gerar Guia de Estilo ; Preparar ambiente de versionamento em nuvem; Preparar ambientes Docker; Configurar ferramentas de qualidade de c\u00f3digo; Configurar integra\u00e7\u00e3o cont\u00ednua; Configurar \u00e9ntrega con\u00edtnua.","title":"RoadMap"},{"location":"roadmap/roadmap/#roadmap","text":"Este documento tem por finalidade armazenar o planejamento do RoadMap seguido no desenvolvimento do projeto.","title":"RoadMap"},{"location":"roadmap/roadmap/#roadmap-do-produto","text":"","title":"RoadMap do Produto"},{"location":"roadmap/roadmap/#roadmap-de-papeis","text":"Esta sec\u00e7\u00e3o apresentar\u00e1 as responsabilidades de cada papel do scrum neste projeto.","title":"RoadMap de pap\u00e9is"},{"location":"roadmap/roadmap/#scrum-master","text":"O(A) Scrum Master ser\u00e1 respons\u00e1vel por: Documentar o Product Backlog ; Priorizar o Product Backlog ; Gerar e atualizar a Tabela de Conhecimentos ; Realizar treinamento sobre metodologia \u00e1gil com a equipe; Gerar documenta\u00e7\u00e3o de Velocity ; Registrar dailies ; Gerar e atualizar o Burndown de Risco ; Realizar o planejamento das sprints seguintes.","title":"Scrum Master"},{"location":"roadmap/roadmap/#arquitetoa","text":"O(A) arquiteto(a) ser\u00e1 respons\u00e1vel por: Gerar Documento de Arquitetura ; Gerar Diagrama de Pacotes ; Gerar Diagrama de Classes ; Configurar o Banco de Dados.","title":"Arquiteto(a)"},{"location":"roadmap/roadmap/#devops","text":"O(A) DevOps ser\u00e1 respon\u015bavel por: Gerar documento de Pol\u00edtica de Branches ; Gerar Guia de Estilo ; Preparar ambiente de versionamento em nuvem; Preparar ambientes Docker; Configurar ferramentas de qualidade de c\u00f3digo; Configurar integra\u00e7\u00e3o cont\u00ednua; Configurar \u00e9ntrega con\u00edtnua.","title":"DevOps"},{"location":"vision_document/vision_document/","text":"","title":"Vision document"}]}